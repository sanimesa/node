"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Profile extends TagoIOModule_1.default {
    /**
     * Lists all the profiles in your account
     */
    async list() {
        const result = await this.doRequest({
            path: "/profile",
            method: "GET",
        });
        return result;
    }
    /**
     * Get Profile info
     * @param profileID Profile identification
     */
    async info(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "GET",
        });
        return result;
    }
    /**
     * Create a profile
     * @param profileObj Profile object with data to be created
     */
    async create(profileObj) {
        const result = await this.doRequest({
            path: `/profile/`,
            method: "POST",
            body: profileObj,
        });
        return result;
    }
    /**
     * Edits a profile
     * @param profileObj Profile object with data to be changed
     */
    async edit(profileID, profileObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "PUT",
            body: profileObj,
        });
        return result;
    }
    /**
     * Delete profile
     * @param profileID Profile identification
     */
    async delete(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * List all the usage statistics of your profile
     * @param profileID Profile identification
     * @param dateObj Object with date and their timezone
     */
    async usageStatisticList(profileID, dateObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/statistics`,
            method: "GET",
            params: Object.assign({}, dateObj),
        });
        return result;
    }
    /**
     * Fetches the information from auditlog of this profile
     * @param profileID Profile identification
     * @param filterObj auditlog filter object
     */
    async auditLog(profileID, filterObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/auditlog`,
            method: "GET",
            params: filterObj || {},
        });
        return result;
    }
    /**
     * Gets the information of addons for the profile
     * @param profileID Profile identification
     */
    async addonList(profileID) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "GET",
        });
        return result;
    }
    /**
     * Sets the information of addons for the profile
     * @param profileID Profile identification
     * @param addonObj
     */
    async addonEdit(profileID, addonObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/addons`,
            method: "POST",
            body: addonObj,
        });
        return result;
    }
    /**
     * Sets the information of services for the profile. Services are the main resources
     * in your profile, for example data input, data output, etc...
     * @param profileID Profile identification
     * @param serviceObj
     */
    async serviceEdit(profileID, serviceObj) {
        const result = await this.doRequest({
            path: `/profile/${profileID}/services`,
            method: "POST",
            body: serviceObj,
        });
        return result;
    }
    /**
     * Transforms the current token to another profile. The current profile will
     * no longer have the current token, as the current token will be acquired by the profile informed.
     * After this call is done, other requests using this token will work solely for the new profile, and
     * no longer for the current profile.
     * @param targetProfileID Profile identification
     */
    async transferTokenToAnotherProfile(targetProfileID) {
        const result = await this.doRequest({
            path: `/profile/switch/${targetProfileID}`,
            method: "PUT",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @param profileID Profile ID
     * @param queryObj Search query params
     */
    tokenList(profileID, queryObj) {
        const result = this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["name", "token", "permission"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "created_at,desc",
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param profileID Profile ID
     * @param tokenParams Token params for new token
     */
    tokenCreate(profileID, tokenParams) {
        const result = this.doRequest({
            path: `/profile/${profileID}/token`,
            method: "POST",
            body: tokenParams,
        });
        return result;
    }
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token) {
        const result = this.doRequest({
            path: `/profile/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Profile;
//# sourceMappingURL=Profile.js.map