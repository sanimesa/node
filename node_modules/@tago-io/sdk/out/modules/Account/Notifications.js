"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Notifications extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all actions from the account
     * @param queryObj Search query params
     */
    async list(queryObj) {
        const result = await this.doRequest({
            path: "/notification/",
            method: "GET",
            params: queryObj,
        });
        return result;
    }
    /**
     * Mark notifications as read
     * @param notificationIDS An array of ids or a single id
     */
    async markAsRead(notificationIDS) {
        if (!Array.isArray(notificationIDS)) {
            notificationIDS = [notificationIDS];
        }
        const result = await this.doRequest({
            path: "/notification/read",
            method: "PUT",
            body: {
                notification_ids: notificationIDS,
            },
        });
        return result;
    }
    /**
     * Accept a notification
     * @param notificationID Notification identification
     */
    async accept(notificationID) {
        const result = await this.doRequest({
            path: `/notification/accept/${notificationID}`,
            method: "POST",
        });
        return result;
    }
    /**
     * Refuse a notification
     * @param notificationID Notification identification
     */
    async refuse(notificationID) {
        const result = await this.doRequest({
            path: `/notification/refuse/${notificationID}`,
            method: "POST",
        });
        return result;
    }
    /**
     * Remove a notification
     * @param notificationID Notification identification
     */
    async remove(notificationID) {
        const result = await this.doRequest({
            path: `/notification/${notificationID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Register device Token on Push Notification Service
     * @param deviceToken Device token
     * @param platform Platform of device
     */
    async registerDevice(deviceToken, platform) {
        const result = await this.doRequest({
            path: `/notification/push/register`,
            method: "POST",
            body: {
                device_token: deviceToken,
                platform,
            },
        });
        return result;
    }
    /**
     * Unregister device Token on Push Notification Service
     * @param deviceToken Device token
     */
    async unRegisterDevice(deviceToken) {
        const result = await this.doRequest({
            path: `/notification/push/unregister`,
            method: "POST",
            body: {
                device_token: deviceToken,
            },
        });
        return result;
    }
}
exports.default = Notifications;
//# sourceMappingURL=Notifications.js.map