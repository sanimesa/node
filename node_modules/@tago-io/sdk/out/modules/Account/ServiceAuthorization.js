"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class ServiceAuthorization extends TagoIOModule_1.default {
    /**
     * Retrieves a list of all tokens
     * @example
     * Default Query: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param query Search query params
     */
    tokenList(query) {
        const result = this.doRequest({
            path: `/serviceauth`,
            method: "GET",
            params: {
                page: (query === null || query === void 0 ? void 0 : query.page) || 1,
                fields: (query === null || query === void 0 ? void 0 : query.fields) || ["name", "token", "permission"],
                filter: (query === null || query === void 0 ? void 0 : query.filter) || {},
                amount: (query === null || query === void 0 ? void 0 : query.amount) || 20,
                orderBy: (query === null || query === void 0 ? void 0 : query.orderBy) ? `${query.orderBy[0]},${query.orderBy[1]}` : "created_at,desc",
            },
        });
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param tokenParams Token params to create new token
     */
    tokenCreate(tokenParams) {
        const result = this.doRequest({
            path: `/serviceauth`,
            method: "POST",
            body: tokenParams,
        });
        return result;
    }
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token) {
        const result = this.doRequest({
            path: `/serviceauth/${token}`,
            method: "DELETE",
        });
        return result;
    }
    tokenEdit(token, verificationCode) {
        const result = this.doRequest({
            path: `/serviceauth/${token}`,
            method: "PUT",
            body: {
                verification_code: verificationCode,
            },
        });
        return result;
    }
}
exports.default = ServiceAuthorization;
//# sourceMappingURL=ServiceAuthorization.js.map