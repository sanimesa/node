"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const SDB_1 = __importDefault(require("./SDB"));
class RunUser extends TagoIOModule_1.default {
    constructor() {
        super(...arguments);
        this.SDB = new SDB_1.default(this.params);
    }
    /**
     * Get Run user info
     * @param tagoIORunURL TagoIO Run url without http
     */
    async info(tagoIORunURL) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/info`,
            method: "GET",
        });
        return result;
    }
    /**
     * Create new TagoIO Run User (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param newUserObj New user data
     * @param region TagoIO Region Server [default usa-1]
     */
    static async create(tagoIORunURL, newUserObj, region) {
        const params = {
            path: `/run/${tagoIORunURL}/signup`,
            method: "POST",
            body: newUserObj,
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Edit Run user info
     * @param tagoIORunURL TagoIO Run url without http
     * @param userChangesObj Data to change in user
     */
    async edit(tagoIORunURL, userChangesObj) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/info`,
            method: "PUT",
            body: userChangesObj,
        });
        return result;
    }
    /**
     * Login at TagoIO Run as user (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param credentialsObj Run user credentials
     * @param region TagoIO Region Server [default usa-1]
     */
    static async login(tagoIORunURL, credentialsObj, region) {
        const params = {
            path: `/run/${tagoIORunURL}/login`,
            method: "POST",
            body: credentialsObj,
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Confirm User on TagoIO Run (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param token TagoIO Run user token
     * @param region TagoIO Region Server [default usa-1]
     */
    static async confirmUser(tagoIORunURL, token, region) {
        const params = {
            path: `/run/${tagoIORunURL}/confirm/${token}`,
            method: "GET",
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Sends a password recover e-mail
     * @param tagoIORunURL TagoIO Run url without http
     * @param email Run user email to recover the password
     * @param region TagoIO Region Server [default usa-1]
     */
    static async passwordRecover(tagoIORunURL, email, region) {
        const params = {
            path: `/run/${tagoIORunURL}/passwordreset/${email}`,
            method: "GET",
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Change password using token of the password recover.
     * @param tagoIORunURL TagoIO Run url without http
     * @param password New password
     */
    async passwordChange(tagoIORunURL, password) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/passwordreset`,
            method: "POST",
            body: {
                password,
            },
        });
        return result;
    }
    /**
     * List notifications.
     * @param tagoIORunURL TagoIO Run url without http
     */
    async notificationList(tagoIORunURL) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/notification`,
            method: "GET",
        });
        return result;
    }
    /**
     * Mark notification as read
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationIDs array of notification ids or a single id
     */
    async notificationMarkRead(tagoIORunURL, notificationIDs) {
        if (!Array.isArray(notificationIDs)) {
            notificationIDs = [notificationIDs];
        }
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/notification`,
            method: "PUT",
            body: {
                notification_ids: notificationIDs,
            },
        });
        return result;
    }
    /**
     * Trigger notification button
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationID TagoIO Run notification id
     * @param buttonID Notification button id
     */
    async notificationButton(tagoIORunURL, notificationID, buttonID) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/notification${notificationID}/${buttonID}`,
            method: "PUT",
        });
        return result;
    }
    /**
     * Delete notification
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationID TagoIO Run notification id
     */
    async notificationDelete(tagoIORunURL, notificationID) {
        const result = await this.doRequest({
            path: `/run/${tagoIORunURL}/notification/${notificationID}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = RunUser;
//# sourceMappingURL=RunUser.js.map