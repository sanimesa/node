"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BatchRequest_1 = __importDefault(require("../../common/BatchRequest"));
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Device extends TagoIOModule_1.default {
    constructor() {
        super(...arguments);
        this.batch = new BatchRequest_1.default(this.params);
    }
    /**
     * Get information about the current device
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.info();
     * ```
     */
    async info() {
        const result = await this.doRequest({
            path: "/info",
            method: "GET",
        });
        return result;
    }
    /**
     * Send data to device
     * @param data An array or one object with data to be send to TagoIO using device token
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.sendData({
     *   variable: "temperature",
     *   unit: "F",
     *   value: 55,
     *   time: "2015-11-03 13:44:33",
     *   location: { lat: 42.2974279, lng: -85.628292 },
     * });
     * ```
     */
    async sendData(data) {
        data = Array.isArray(data) ? data : [data];
        const result = await this.doRequest({
            path: "/data",
            method: "POST",
            body: data,
        });
        return result;
    }
    /**
     * Get data from TagoIO Device.
     * @param queryParams Object with query params
     * @returns An array of TagoIO registers
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getData({
     *   query: "last_item",
     *   variable: "humidity",
     * });
     * ```
     */
    async getData(queryParams) {
        if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.query) === "default") {
            delete queryParams.query;
        }
        let result = await this.doRequest({
            path: "/data",
            method: "GET",
            params: queryParams,
        });
        if (typeof result === "number") {
            result = [
                {
                    id: "none",
                    origin: "?",
                    time: new Date(),
                    value: result,
                    variable: "?",
                },
            ];
        }
        return result.map((item) => {
            item.time = new Date(item.time);
            if (item.created_at) {
                item.created_at = new Date(item.created_at);
            }
            return item;
        });
    }
    /**
     * Delete data from device
     * @param queryParams
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.deleteData({
     *   query: "last_item",
     *   variable: "humidity",
     *   value: 10
     * });
     * ```
     */
    async deleteData(queryParams) {
        if (!queryParams) {
            queryParams = { query: "last_item" };
        }
        if ((queryParams === null || queryParams === void 0 ? void 0 : queryParams.query) === "default") {
            delete queryParams.query;
        }
        const result = await this.doRequest({
            path: "/data",
            method: "DELETE",
            params: queryParams,
        });
        return result;
    }
    /**
     * Get parameters from device
     * @param onlyUnRead set true to get only unread parameters
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getParameters();
     * ```
     */
    async getParameters(onlyUnRead) {
        const params = {};
        if (onlyUnRead === true) {
            params.sent_status = true;
        }
        const result = await this.doRequest({
            path: "/device/params",
            method: "GET",
            params: params,
        });
        return result;
    }
    /**
     * Mark parameter as read
     * @param parameterID Parameter identification
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.setParameterAsRead("parameter_id");
     * ```
     *
     */
    async setParameterAsRead(parameterID) {
        const result = await this.doRequest({
            path: `/device/params/${parameterID}`,
            method: "PUT",
        });
        return result;
    }
}
exports.default = Device;
//# sourceMappingURL=Device.js.map